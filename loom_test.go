package loom

import (
	"net/http"
	"net/http/httptest"
	"reflect"
	"strings"
	"testing"

	"github.com/labstack/echo/v4"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)

// Generated by Claude

type testController struct {
	Controller
	initCalled bool
}

func (tc *testController) Init() error {
	tc.initCalled = true
	return nil
}

func (tc *testController) Index(c echo.Context) error {
	return c.String(http.StatusOK, "index")
}

func (tc *testController) Show(c echo.Context) error {
	return c.String(http.StatusOK, "show")
}

func TestNew(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	if loom == nil {
		t.Error("New() returned nil")
	}
	if loom.E == nil {
		t.Error("New() Echo instance is nil")
	}
	if loom.Deps != deps {
		t.Error("New() Deps not set correctly")
	}
	if loom.controllerRegistry == nil {
		t.Error("New() controllerRegistry is nil")
	}
	if loom.methodRegistry == nil {
		t.Error("New() methodRegistry is nil")
	}
}

func TestRegister(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	Register[*testController](loom)

	// Check if controller is registered
	controller, exists := loom.controllerRegistry["TestController"]
	if !exists {
		t.Error("Controller not registered")
	}

	if controller.Type != reflect.TypeOf((*testController)(nil)) {
		t.Error("Controller type not set correctly")
	}

	if controller.Instance == nil {
		t.Error("Controller instance is nil")
	}

	// Check if Init was called
	if instance, ok := controller.Instance.(*testController); ok {
		if !instance.initCalled {
			t.Error("Controller Init method was not called")
		}
	} else {
		t.Error("Controller instance is not of correct type")
	}
}

func TestLoom_GET(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	Register[*testController](loom)

	route := loom.GET("/test", "test.index")

	if route == nil {
		t.Error("GET() returned nil route")
	}

	if route.Path != "/test" {
		t.Errorf("Route path = %v, want %v", route.Path, "/test")
	}

	if route.Method != "GET" {
		t.Errorf("Route method = %v, want %v", route.Method, "GET")
	}
}

func TestHandlerFor_ValidAction(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	Register[*testController](loom)

	handler := loom.handlerFor("test.index")

	if handler == nil {
		t.Error("handlerFor() returned nil handler")
	}

	// Test the handler
	req := httptest.NewRequest(http.MethodGet, "/", nil)
	rec := httptest.NewRecorder()
	c := loom.E.NewContext(req, rec)

	err := handler(c)
	if err != nil {
		t.Errorf("Handler error = %v", err)
	}

	if rec.Code != http.StatusOK {
		t.Errorf("Handler status = %v, want %v", rec.Code, http.StatusOK)
	}

	if strings.TrimSpace(rec.Body.String()) != "index" {
		t.Errorf("Handler body = %v, want %v", rec.Body.String(), "index")
	}
}

func TestHandlerFor_InvalidFormat(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	defer func() {
		if r := recover(); r == nil {
			t.Error("handlerFor() expected panic for invalid format, got none")
		}
	}()

	loom.handlerFor("invalid")
}

func TestHandlerFor_ControllerNotFound(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	defer func() {
		if r := recover(); r == nil {
			t.Error("handlerFor() expected panic for non-existent controller, got none")
		}
	}()

	loom.handlerFor("nonexistent.index")
}

func TestHandlerFor_MethodNotFound(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	Register[*testController](loom)

	defer func() {
		if r := recover(); r == nil {
			t.Error("handlerFor() expected panic for non-existent method, got none")
		}
	}()

	loom.handlerFor("test.nonexistent")
}

func TestGetOrCreateMethodCall(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	Register[*testController](loom)

	// First call should create the method call
	methodCall1 := loom.getOrCreateMethodCall("TestController", "Index")
	if methodCall1 == nil {
		t.Error("getOrCreateMethodCall() returned nil")
	}

	// Second call should return the cached method call
	methodCall2 := loom.getOrCreateMethodCall("TestController", "Index")
	if methodCall1 != methodCall2 {
		t.Error("getOrCreateMethodCall() should return cached method call")
	}

	// Check method call properties
	if methodCall1.method.Name != "Index" {
		t.Errorf("Method name = %v, want %v", methodCall1.method.Name, "Index")
	}

	if methodCall1.controllerInstance == nil {
		t.Error("Controller instance is nil")
	}
}

func TestGetOrCreateMethodCall_ControllerNotFound(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	defer func() {
		if r := recover(); r == nil {
			t.Error("getOrCreateMethodCall() expected panic for non-existent controller, got none")
		}
	}()

	loom.getOrCreateMethodCall("NonexistentController", "Index")
}

func TestGetOrCreateMethodCall_MethodNotFound(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	Register[*testController](loom)

	defer func() {
		if r := recover(); r == nil {
			t.Error("getOrCreateMethodCall() expected panic for non-existent method, got none")
		}
	}()

	loom.getOrCreateMethodCall("TestController", "NonexistentMethod")
}

func TestControllerActionNameTransformation(t *testing.T) {
	tests := []struct {
		input                  string
		expectedControllerName string
		expectedMethodName     string
	}{
		{"users.index", "UsersController", "Index"},
		{"user_profiles.show", "UserProfilesController", "Show"},
		{"api_users.create", "ApiUsersController", "Create"},
		{"test.test_method", "TestController", "TestMethod"},
	}

	for _, tt := range tests {
		t.Run(tt.input, func(t *testing.T) {
			parts := strings.Split(tt.input, ".")
			controllerTypeName := cases.Title(language.English).String(strings.ReplaceAll(parts[0], "_", " ")) + "Controller"
			methodName := cases.Title(language.English).String(strings.ReplaceAll(parts[1], "_", " "))

			controllerTypeName = strings.ReplaceAll(controllerTypeName, " ", "")
			methodName = strings.ReplaceAll(methodName, " ", "")

			if controllerTypeName != tt.expectedControllerName {
				t.Errorf("Controller name = %v, want %v", controllerTypeName, tt.expectedControllerName)
			}

			if methodName != tt.expectedMethodName {
				t.Errorf("Method name = %v, want %v", methodName, tt.expectedMethodName)
			}
		})
	}
}

func TestIntegration_FullFlow(t *testing.T) {
	deps := NewDeps()
	loom := New(deps)

	Register[*testController](loom)

	// Register routes
	loom.GET("/test", "test.index")
	loom.GET("/test/:id", "test.show")

	// Test the server without actually starting it
	req1 := httptest.NewRequest(http.MethodGet, "/test", nil)
	rec1 := httptest.NewRecorder()
	loom.E.ServeHTTP(rec1, req1)

	if rec1.Code != http.StatusOK {
		t.Errorf("First request status = %v, want %v", rec1.Code, http.StatusOK)
	}

	if strings.TrimSpace(rec1.Body.String()) != "index" {
		t.Errorf("First request body = %v, want %v", rec1.Body.String(), "index")
	}

	req2 := httptest.NewRequest(http.MethodGet, "/test/123", nil)
	rec2 := httptest.NewRecorder()
	loom.E.ServeHTTP(rec2, req2)

	if rec2.Code != http.StatusOK {
		t.Errorf("Second request status = %v, want %v", rec2.Code, http.StatusOK)
	}

	if strings.TrimSpace(rec2.Body.String()) != "show" {
		t.Errorf("Second request body = %v, want %v", rec2.Body.String(), "show")
	}
}
